Linked Lists->Linked lists are a linear data structure consisting of a sequence of nodes, where each node contains a value and a reference (or link) to the next node in the sequence.
                     Time Complexity:
Insertion: O(n)
Deletion: O(n)
Search: O(n)
Access: O(n)
                Space Complexity:
Space required for each element: O(n)
Space required for links: O(n)
     Advantages:
Dynamic size: Linked lists can grow or shrink in size as needed.
Easy insertion and deletion: Elements can be inserted or deleted at any position in constant time.
No need for contiguous memory: Linked lists can store elements in non-contiguous memory locations.
     Disadvantages:
Random access: Accessing elements by index requires traversing the list from the beginning.
Extra memory used for links: Linked lists require additional memory to store the links between nodes.
     Dynamic Arrays:
Dynamic arrays are a linear data structure that provides random access to elements and also supports efficient insertion and deletion at any position. They are implemented using arrays, where the size of the array is dynamically adjusted to accommodate elements.

   Time Complexity:
Insertion: O(n)
Deletion: O(n)
Search: O(n)
Access: O(1)
   Space Complexity:
Space required for each element: O(n)
Space required for array: O(n)
    Advantages:
Random access: Elements can be accessed in constant time.
Efficient insertion and deletion: Elements can be inserted or deleted at any position in amortized constant time.
Contiguous memory: Dynamic arrays store elements in contiguous memory locations.
  Disadvantages:
Resizing: Resizing the array requires allocating a new array and copying elements, which can be expensive for large arrays.
Fixed size: Dynamic arrays have a fixed size, which can be a limitation for applications that require dynamic resizing.